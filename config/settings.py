"""
Django settings for tagmap project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
import sys
import os
import dj_database_url
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/


# Environment specific settings from environment variables or local .env file
SECRET_KEY = os.environ['SECRET_KEY']
SERVER_ENV = os.environ['ENV']
DEBUG = SERVER_ENV.lower() in ['dev', 'test']
TESTING = 'test' in sys.argv or 'test_coverage' in sys.argv

# specify in environment variables (.env) whether or not we are serving
# this application from express.js or django
SERVER_TYPE = os.environ.get('SERVER', 'NODE')

ALLOWED_HOSTS = os.environ['ALLOWED_HOSTS'].split(',')

# Application definition

INSTALLED_APPS = [
    # custom apps
    'api',
    'config',

    # third party libraries
    'debug_toolbar',
    'rest_framework',
    'corsheaders',
    'django_celery_results',
    'django_extensions',

    # django libraries
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
if os.environ.get('DATABASE_URL', False):
    default_database = dj_database_url.config()
else:
    default_database = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }

DATABASES = {
    'default': default_database
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/django')
STATIC_FILES = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    STATIC_FILES,
]

# whitenoise config
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Cross Origin Resource Sharing https://github.com/ottoyiu/django-cors-headers
CORS_ORIGIN_WHITELIST = os.environ['CORS_ORIGIN_WHITELIST'].split(',')
CSRF_COOKIE_NAME = "csrftoken"

# Authentication Settings
JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,
    # don't set this long of expiration in prod
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1000),
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=1000),
}

# DRF settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [],
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
    ),
}

if DEBUG and not TESTING:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = [
        'rest_framework.renderers.BrowsableAPIRenderer',
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
    ]


# needed for django_toolbar
if DEBUG:
    import socket
    import os
    # required for running inside docker container
    ip = socket.gethostbyname(socket.gethostname())
    INTERNAL_IPS = ('localhost', '0.0.0.0', '127.0.0.1', '172.18.0.1', ip[:-1] + '1')


PICKLE_DIR = os.path.join(BASE_DIR, 'search', 'pickles')
IMAGE_DIR = os.path.join(BASE_DIR, 'static', 'download_images')